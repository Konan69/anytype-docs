"use strict";(self.webpackChunkanytype_docs=self.webpackChunkanytype_docs||[]).push([[432],{7523:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"sync/index","title":"Sync and CRDT Documentation","description":"This section documents the synchronization infrastructure and CRDT (Conflict-free Replicated Data Type) implementation in Anytype.","source":"@site/docs/sync/index.md","sourceDirName":"sync","slug":"/sync/","permalink":"/anytype-docs/docs/sync/","draft":false,"unlisted":false,"editUrl":"https://github.com/konan69/anytype-docs/tree/main/docs/sync/index.md","tags":[],"version":"current","frontMatter":{"id":"index","title":"Sync and CRDT Documentation","sidebar_label":"Sync"}}');var s=t(4848),c=t(8453);const o={id:"index",title:"Sync and CRDT Documentation",sidebar_label:"Sync"},r="Sync and CRDT Documentation",a={},d=[{value:"Synchronization Architecture",id:"synchronization-architecture",level:2},{value:"CRDT Implementation",id:"crdt-implementation",level:2}];function l(n){const e={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"sync-and-crdt-documentation",children:"Sync and CRDT Documentation"})}),"\n",(0,s.jsx)(e.p,{children:"This section documents the synchronization infrastructure and CRDT (Conflict-free Replicated Data Type) implementation in Anytype."}),"\n",(0,s.jsx)(e.h2,{id:"synchronization-architecture",children:"Synchronization Architecture"}),"\n",(0,s.jsx)(e.p,{children:"Anytype uses a sophisticated synchronization system:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"P2P Synchronization"})," - Peer-to-peer synchronization between devices"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Server Infrastructure"})," - Optional server components for facilitating sync"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Self-hosting"})," - Options for self-hosting the sync infrastructure"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"crdt-implementation",children:"CRDT Implementation"}),"\n",(0,s.jsx)(e.p,{children:"Anytype implements CRDTs to handle offline-first editing and conflict resolution:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Operation-based CRDTs"})," - Used for text and structural editing"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"State-based CRDTs"})," - Used for certain metadata synchronization"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Conflict Resolution"})," - Automatic resolution of conflicting changes"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>r});var i=t(6540);const s={},c=i.createContext(s);function o(n){const e=i.useContext(c);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),i.createElement(c.Provider,{value:e},n.children)}}}]);